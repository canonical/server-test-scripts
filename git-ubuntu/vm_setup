#!/bin/bash
# git-ubuntu test VM setup
#
# Copyright 2018 Canonical Ltd.
# Joshua Powers <josh.powers@canonical.com>
set -e
VERBOSITY=0

rand_name=$(uuidgen -r | cut -c1-8)
VM_NAME="${1:-noble-$rand_name}"
RELEASE="noble"

error() { echo "$@" 1>&2; }
fail() { [ $# -eq 0 ] || error "$@"; exit 1; }
bad_usage() { usage 1>&2; return 1; }

debug() {
    local level=${1}; shift;
    [ "${level}" -gt "${VERBOSITY}" ] && return
    error "${@}"
}

usage() {
    cat <<EOF
Usage: ${0##*/} [ -hv ]
   git-ubuntu test vm setup
EOF
}

vm_launch() {
    local name=$1 release=$2
    shift 2

    uvt-simplestreams-libvirt --verbose \
        sync --source http://cloud-images.ubuntu.com/daily \
        "release~($release)" arch="amd64" || true
    uvt-kvm create --memory 1024 "$name" release="$release" label=daily
    uvt-kvm wait --insecure "$name"
}

vm_destroy() {
    local name=$1
    shift

    if virsh list --name | grep -q "$name"; then
        uvt-kvm destroy "$name" ||
            fail "could not destory $name"
    fi
}

vm_exec() {
    local name=$1 cmd=$2
    shift 2

    uvt-kvm ssh --insecure "$name" -- "$cmd" ||
        fail "failed: $cmd"
}

vm_pull() {
    local name=$1 from=$2 to=$3
    shift 3

    ip=$(uvt-kvm ip "$name")
    scp -oStrictHostKeyChecking=no "ubuntu@$ip:$from" "$to" ||
        fail "pull: failed to pull '$from' to '$to'"
}

vm_push() {
    local name=$1 from=$2 to=$3
    shift 3

    ip=$(uvt-kvm ip "$name")
    scp -oStrictHostKeyChecking=no "$from" "ubuntu@$ip:$to" ||
        fail "push: failed to push '$from' to '$to'"
}

main() {
    local short_opts="hv"
    local long_opts="help,verbose"
    local getopt_out=""
    getopt_out=$(getopt --name "${0##*/}" \
        --options "${short_opts}" --long "${long_opts}" -- "$@") ||
        { bad_usage; return; }
    eval set -- "${getopt_out}" ||
        { bad_usage; return; }

    local cur="" next=""
    while [ $# -ne 0 ]; do
        cur="$1"; next="$2";
        case "$cur" in
            -h|--help) usage ; exit 0;;
            -v|--verbose) VERBOSITY=$((VERBOSITY+1));;
            --) shift; break;;
        esac
        shift;
    done

    echo "creating $RELEASE vm to build and test snap"
    vm_launch "$VM_NAME" "$RELEASE" ||
        fail "could not create $RELEASE vm"

    if [ ! -z "${https_proxy-}" ]; then
        echo "configuring user profile https_proxy"
        vm_exec "$VM_NAME" "echo 'export https_proxy=${https_proxy}' >> ~/.bashrc"
	vm_exec "$VM_NAME" "echo 'https_proxy=${https_proxy}' | sudo tee -a /etc/environment"
	vm_exec "$VM_NAME" "sudo systemctl restart snapd.service"
    fi
    if [ ! -z "${http_proxy-}" ]; then
        echo "configuring user profile http_proxy"
        vm_exec "$VM_NAME" "echo 'export http_proxy=${http_proxy}' >> ~/.bashrc"
	vm_exec "$VM_NAME" "echo 'http_proxy=${http_proxy}' | sudo tee -a /etc/environment"
	vm_exec "$VM_NAME" "sudo systemctl restart snapd.service"
    fi

    echo "configuring LXD"
    vm_exec "$VM_NAME" "sudo lxd init --auto"
    vm_exec "$VM_NAME" "sudo lxd waitready --timeout=60"

    if [ ! -z "${https_proxy-}" ]; then
        echo "configuring lxc profile https_proxy"
        vm_exec "$VM_NAME" "lxc profile set default environment.https_proxy ${https_proxy}"
    fi
    if [ ! -z "${http_proxy-}" ]; then
        echo "configuring lxc profile http_proxy"
        vm_exec "$VM_NAME" "lxc profile set default environment.http_proxy ${http_proxy}"
    fi

    echo "configuring the git lp: shorthand"
    vm_exec "$VM_NAME" "git config --global url.'https://git.launchpad.net/'.insteadOf lp:"

    return 0
}

main "$@"
# vi: ts=4 noexpandtab
