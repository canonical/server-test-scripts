#!/bin/bash
set -u

VERBOSITY=0
TEMP_D=""
KEEP=false
CONTAINER=""

error() { echo "$@" 1>&2; }
fail() { [ $# -eq 0 ] || error "$@"; exit 1; }
errorrc() { local r=$?; error "$@" "ret=$r"; return $r; }

Usage() {
    cat <<EOF
Usage: ${0##*/} [ options ] CentOS version

    This utility can makes it easier to tests of CentOS builds from COPR.

    options:
      -g | --group    COPR group to use (default: cloud-init)
      -h | --help     this usage information
      -k | --keep     keep container after tests
      -p | --project  COPR project to use (default: cloud-init-dev)
      -n | --name     Container name
           --vm       Use a LXD VM instead of a container
EOF
}

bad_Usage() { Usage 1>&2; [ $# -eq 0 ] || error "$@"; return 1; }
cleanup() {
    if [ -n "$CONTAINER" -a "$KEEP" = "false" ]; then
        delete_container "$CONTAINER"
    fi
    [ -z "${TEMP_D}" -o ! -d "${TEMP_D}" ] || rm -Rf "${TEMP_D}"
}

debug() {
    local level=${1}; shift;
    [ "${level}" -gt "${VERBOSITY}" ] && return
    error "::" "${@}"
}

inside() {
    local name="$1"
    shift
    debug 2 "executing in $name as root: $*"
    lxc exec "$name" -- env LC_ALL=C LANG=C "$@"
}

start_container() {
    local src="$1" name="$2" use_vm="$3"
    debug 1 "starting container $name from '$src'"
    launch_flags=()
    [ "$use_vm" == true ] && launch_flags+=(--vm)
    lxc launch "$src" "$name" "${launch_flags[@]}" || {
        errorrc "Failed to start container '$name' from '$src'";
        return
    }
    CONTAINER=$name

    local system_up=false
    for i in {0..30}; do
        [ "$i" -gt 1 ] && sleep 5
        inside "$name" true 2>/dev/null && system_up=true && break
    done
    [ $system_up == true ] || { errorrc "exec command inside $name failed."; return; }

    local out="" ret=""
    debug 1 "waiting for networking"
    out=$(inside "$name" sh -c '
        i=0
        while [ $i -lt 60 ]; do
            getent hosts mirrorlist.centos.org && exit 0
            sleep 2
        done 2>&1')
    ret=$?
    if [ $ret -ne 0 ]; then
        error "Waiting for network in container '$name' failed. [$ret]"
        error "$out"
        return $ret
    fi

    if [ ! -z "${http_proxy-}" ]; then
        debug 1 "configuring proxy ${http_proxy}"
        inside "$name" sh -c "echo proxy=$http_proxy >> /etc/yum.conf"
        inside "$name" sh -c "sed -i --regexp-extended '/^#baseurl=/s/#// ; /^(mirrorlist|metalink)=/s/^/#/' /etc/yum.repos.d/*.repo"
        inside "$name" sh -c "sed -i 's/download\.fedoraproject\.org/dl.fedoraproject.org/g' /etc/yum.repos.d/*.repo"
        inside "$name" sh -c "sed -i 's/download\.example/dl.fedoraproject.org/g' /etc/yum.repos.d/*.repo"
        inside "$name" sed -i 's/enabled=1/enabled=0/' /etc/yum/pluginconf.d/fastestmirror.conf
    fi
}

install_pkgs() {
    local needed="" pair="" pkg="" cmd="" needed=""
    local name="$1"
    shift
    local n max r
    n=0; max=10;
    debug 1 "installing packages $*"
    bcmd="yum install --downloadonly --assumeyes --setopt=keepcache=1"
    while n=$(($n+1)); do
       inside "$name" $bcmd "$@"
       r=$?
       [ $r -eq 0 ] && { debug 2 "updated cache successfully"; break; }
       [ $n -ge $max ] && { error "gave up on $bcmd"; exit $r; }
       nap=$(($n*5))
       debug 1 ":: failed [$r] ($n/$max). sleeping $nap."
       sleep $nap
    done
    inside "$name" yum install --cacheonly --assumeyes "$@"
    if inside "$name" grep -q "^proxy=" /etc/yum.conf; then
        debug 1 "http proxy in use => forcing the use of fixed URLs in /etc/yum.repos.d/*.repo"
        inside "$name" sh -c "sed -i --regexp-extended '/^#baseurl=/s/#// ; /^(mirrorlist|metalink)=/s/^/#/' /etc/yum.repos.d/*.repo"
        inside "$name" sh -c "sed -i 's/download\.fedoraproject\.org/dl.fedoraproject.org/g' /etc/yum.repos.d/*.repo"
        inside "$name" sh -c "sed -i 's/download\.example/dl.fedoraproject.org/g' /etc/yum.repos.d/*.repo"
    fi
}

delete_container() {
    debug 1 "removing container $1 [--keep to keep]"
    lxc delete --force "$1"
}

main() {
    local short_opts="g:hkp:vn:"
    local long_opts="group:,help,keep,project:,verbose,name:,vm"
    local getopt_out=""
    getopt_out=$(getopt --name "${0##*/}" \
        --options "${short_opts}" --long "${long_opts}" -- "$@") &&
        eval set -- "${getopt_out}" ||
        { bad_Usage; return; }

    local cur=""
    local group="cloud-init" project="cloud-init-dev"
    local name=""
    local use_vm=false

    while [ $# -ne 0 ]; do
        cur="${1:-}";
        next="$2"
        case "$cur" in
            -g|--group) group="$next";;
            -h|--help) Usage; exit 0;;
            -k|--keep) KEEP=true;;
            -p|--project) project="$next";;
            -n|--name) name="$next";;
            -v|--verbose) VERBOSITY=$((${VERBOSITY}+1));;
               --vm) use_vm=true;;
            --) shift; break;;
        esac
        shift;
    done

    [ $# -eq 1 ] || { bad_Usage "ERROR: Must provide version!"; return; }
    version="$1"

    TEMP_D=$(mktemp -d "${TMPDIR:-/tmp}/${0##*/}.XXXXXX") ||
        fail "failed to make tempdir"
    trap cleanup EXIT

    # program starts here
    local uuid=""
    uuid=$(uuidgen -t) || { error "no uuidgen"; return 1; }
    name=${name:-"copr-centos-${uuid%%-*}"}
    repo="copr.repo"

    local image="images:centos/$version"
    # CentOS >= 8 only exists as CentOS Stream
    ((version >= 8)) && image+="-Stream"
    start_container "$image" "$name" "$use_vm"

    tee "$TEMP_D/$repo" <<EOF >/dev/null
[group_cloud-init-cloud-init-dev]
name=Copr repo for cloud-init-dev owned by @cloud-init
baseurl=https://copr-be.cloud.fedoraproject.org/results/@$group/$project/epel-$version-\$basearch/
type=rpm-md
skip_if_unavailable=True
gpgcheck=1
gpgkey=https://copr-be.cloud.fedoraproject.org/results/@$group/$project/pubkey.gpg
repo_gpgcheck=0
enabled=1
enabled_metadata=1
EOF

    debug 1 "setting up yum copr.repo file"
    lxc file push "$TEMP_D/$repo" "$name/etc/yum.repos.d/$repo" ||
        fail "failed: setting up copr.repo"

    install_pkgs "$name" epel-release ||
        fail "failed to install epel-release"

    # CentOS Stream needs EPEL Next on top of EPEL
    if ((version >= 8)); then
        install_pkgs "$name" epel-next-release ||
            fail "failed to install epel-next-release"
    fi

    install_pkgs "$name" cloud-init ||
        fail "failed: installing cloud-init"

    debug 1 "running cloud-init"
    inside "$name" cloud-init --help ||
        fail "failed: running cloud-init help"
    inside "$name" yum info cloud-init ||
        fail "failed: getting cloud-init info"

    return 0
}

main "$@"
# vi: ts=4 expandtab
